
name: "java_app_pipeline"

on:
  push:
     branches: [ main ]
   # branches: [ main, develop, "feature/*", "hotfix/*", "release/*" ]
    
  pull_request:
   
    branches: [ develop ]

jobs:
  
  Codebuild:
    name: Codebuild
    runs-on: ubuntu-latest
    env:
     MY_TOKEN: ${{ secrets.GITTOKEN }}
  
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
         java-version: '11'
         distribution: 'temurin'
         cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
    
      
  sonar:
      name: Test - SonarCloud Scan
      runs-on: ubuntu-latest
      needs: [ Codebuild ]
      steps:
        - uses: actions/checkout@v1
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
           java-version: 11.0.4
        - name: SonarCloud Scan
          run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           
  check_quality:
    name: Check Sonar Report Quality
    runs-on: ubuntu-latest
    needs: [sonar]
    env:
      CODE_SMELLS_THRESHOLD: "16"
      VULNERABILITIES_THRESHOLD: "0"
      BUGS_THRESHOLD: "0"
    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Retrieve SonarCloud Metrics
        id: retrieve_metrics
        run: |
          SONAR_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                          "https://sonarcloud.io/api/measures/component?component=Shara-org_sample-java-repo&metricKeys=code_smells,vulnerabilities,bugs")
          echo "::set-output name=sonar_response::$SONAR_RESPONSE"
      - name: Check Sonar Report
        run: |
          SONAR_RESPONSE='${{ steps.retrieve_metrics.outputs.sonar_response }}'
          CODE_SMELLS=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "code_smells") | .value')
          VULNERABILITIES=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "vulnerabilities") | .value')
          BUGS=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "bugs") | .value')
          echo "CODE_SMELLS: $CODE_SMELLS"
          echo "VULNERABILITIES: $VULNERABILITIES"
          echo "BUGS: $BUGS"
          if [[ $CODE_SMELLS -gt $CODE_SMELLS_THRESHOLD || $VULNERABILITIES -gt $VULNERABILITIES_THRESHOLD || $BUGS -gt $BUGS_THRESHOLD ]]; then
          echo "Sonar report does not meet quality standards. Exiting with an error."
          exit 1
          else
          echo "Sonar report meets quality standards."
          fi


  docker:
      name: Publish - Docker Hub
      runs-on: ubuntu-latest
      needs: [ Codebuild , sonar , check_quality]
      env:
       REPO: ${{ secrets.DOCKER_REPO }}

      steps:
        - uses: actions/checkout@v1
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
           java-version: 11.0.4
        - name: Login to Docker Hub
          run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
        - name: Build Docker image
          run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
        - name: Publish Docker image
          run: docker push $REPO
          
  buildImage:
      name: building docker image
      runs-on: ubuntu-latest
      needs: [ Codebuild , sonar , check_quality]
      steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}

